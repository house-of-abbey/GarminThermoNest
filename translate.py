####################################################################################
#
# Distributed under MIT Licence
#   See https://github.com/house-of-abbey/scratch_vhdl/blob/main/LICENCE.
#
####################################################################################
#
# ThermoNest is a Garmin IQ application written in Monkey C and routinely tested on
# a Venu 2 device. The source code is provided at:
#            https://github.com/house-of-abbey/GarminThermoNest.
#
# J D Abbey & P A Abbey, 28 December 2022
#
#
# Description:
#
# Python script to automatically translate the strings.xml file to each supported
# language using Google Translate.
#
# References:
#  * https://www.crummy.com/software/BeautifulSoup/bs4/doc/
#
####################################################################################

from deep_translator import GoogleTranslator
from bs4 import BeautifulSoup, Comment
import os

# List of tuples in the form os:
#  * Garmin IQ language three letter mnemonic,
#  * Google Translate language mnemonic,
#  * Language familiar name (mainly for reference)
languages: list[tuple[str, str, str]] = [
  ("ara", "ar", "Arabic"),
  ("bul", "bg", "Bulgarian"),
  ("zhs", "zh-CN", "Chinese (Simplified)"),
  ("zht", "zh-TW", "Chinese (Traditional)"),
  ("hrv", "hr", "Croatian"),
  ("ces", "cs", "Czech"),
  ("dan", "da", "Danish"),
  ("dut", "nl", "Dutch"),
  ("deu", "de", "German"),
  ("gre", "el", "Greek"),
  ("eng", "en", "English"),
  ("est", "et", "Estonian"),
  ("fin", "fi", "Finnish"),
  ("fre", "fr", "French"),
  ("heb", "iw", "Hebrew"),
  ("hun", "hu", "Hungarian"),
  ("ind", "id", "Indonesian"),
  ("ita", "it", "Italian"),
  ("jpn", "ja", "Japanese"),
  ("kor", "ko", "Korean"),
  ("lav", "lv", "Latvian"),
  ("lit", "lt", "Lithuanian"),
  ("zsm", "ms", "Standard (Bahasa) Malay"),
  ("nob", "no", "Norwegian"),
  ("pol", "pl", "Polish"),
  ("por", "pt", "Portuguese"),
  ("ron", "ro", "Romanian"),
  # ("rus", "ru", "Russian"),
  ("slo", "sk", "Slovak"),
  ("slv", "sl", "Slovenian"),
  ("spa", "es", "Spanish"),
  ("swe", "sv", "Swedish"),
  ("tha", "th", "Thai"),
  ("tur", "tr", "Turkish"),
  ("ukr", "uk", "Ukrainian"),
  ("vie", "vi", "Vietnamese")
]

langLength = len(languages)

exceptionIds: list[str] = ["AppName", "AppVersionTitle"]
titleIds: list[str] = ["setMode", "tapIcon"]

i = 1
with open("./resources/strings/strings.xml") as f:
  c = f.read()
  for l in languages:
    print(f"{i} of {langLength}: Translating English to {l[2]}")
    soup = BeautifulSoup(c, "html.parser")
    soup.find(name="strings").insert_before(Comment(f" Generated by Google Translate (English => {l[2]}) "))
    soup.find(name="strings").insert_before(Comment(" " + GoogleTranslator(source='en', target=l[1]).translate("Generated by Google Translate from English") + " "))
    for s in soup.find(name="strings").findAll(name="string"):
      if s["id"] not in exceptionIds:
        a = GoogleTranslator(source='en', target=l[1]).translate(s.string)
        if s["id"] in titleIds:
          s.string = a.title()
        else:
          s.string = a
    for s in soup.find(name="strings").findAll(text=lambda text:isinstance(text, Comment)):
      s.replace_with(Comment(" " + GoogleTranslator(source='en', target=l[1]).translate(s) + " "))
    #print(soup.prettify())
    os.makedirs(f"./resources-{l[0]}/strings/", exist_ok=True)
    with open(f"./resources-{l[0]}/strings/strings.xml", "wb") as w:
      w.write(bytes(soup.prettify(), "utf-8"))
    i += 1
